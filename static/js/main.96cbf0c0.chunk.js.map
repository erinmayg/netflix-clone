{"version":3,"sources":["axios.js","components/Row.js","requests.js","components/Banner.js","components/Nav.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","className","map","movie","onClick","movieTrailer","name","original_name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","handleClick","src","poster_path","backdrop_path","alt","id","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.96cbf0c0.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n});\n\nexport default instance;\n","import React, { useState, useEffect } from 'react';\nimport YouTube from 'react-youtube';\nimport axios from '../axios';\nimport movieTrailer from 'movie-trailer';\nimport '../css/row.css';\n\nconst base_url = 'https://image.tmdb.org/t/p/original/';\n\nfunction Row({ title, fetchUrl, isLargeRow }) {\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState('');\n\n  const opts = {\n    height: '390',\n    width: '100%',\n    playerVars: {\n      autoplay: 1,\n    },\n  };\n\n  const handleClick = (movie) => {\n    if (trailerUrl) {\n      setTrailerUrl('');\n    } else {\n      movieTrailer(movie?.name || movie?.title || movie?.original_name || '')\n        .then((url) => {\n          const urlParams = new URLSearchParams(new URL(url).search);\n          setTrailerUrl(urlParams.get('v'));\n        })\n        .catch((error) => console.log(error));\n    }\n  };\n\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n    fetchData();\n  }, [fetchUrl]);\n\n  return (\n    <div className='row'>\n      <h2>{title}</h2>\n\n      <div className='row__posters'>\n        {movies.map((movie) => (\n          <img\n            key={movie.id}\n            onClick={() => handleClick(movie)}\n            className={isLargeRow ? 'row__posterLarge' : 'row__poster'}\n            src={`${base_url}${\n              isLargeRow ? movie?.poster_path : movie?.backdrop_path || null\n            }`}\n            alt={movie.name}\n          />\n        ))}\n      </div>\n\n      {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\n    </div>\n  );\n}\n\nexport default Row;\n","const API_KEY = '7fe8c45a008ca73d2c898681e7ac6889';\n\nconst requests = {\n  fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\n  fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\n  fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n  fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\n  fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\n  fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\n  fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n  fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\n};\n\nexport default requests;\n","import React, { useState, useEffect } from 'react';\nimport axios from '../axios';\nimport requests from '../requests';\nimport '../css/banner.css';\n\nfunction Banner() {\n  const [movie, setMovie] = useState([]);\n\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(requests.fetchNetflixOriginals);\n      setMovie(\n        request.data.results[\n          Math.floor(Math.random() * request.data.results.length)\n        ]\n      );\n      return request;\n    }\n    fetchData();\n  }, []);\n\n  function truncate(str, n) {\n    return str?.length > n ? str.substr(0, n - 1) + '...' : str;\n  }\n\n  return (\n    <header\n      className='banner'\n      style={{\n        backgroundSize: 'cover',\n        backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\n        backgroundPosition: 'center center',\n      }}\n    >\n      <div className='banner__contents'>\n        <h1 className='banner__title'>\n          {movie?.title || movie?.name || movie?.original_name}\n        </h1>\n\n        <div className='banner__buttons'>\n          <button className='banner__button'>Play</button>\n          <button className='banner__button'>My List</button>\n        </div>\n\n        <h1 className='banner__description'>\n          {truncate(movie?.overview, 150)}\n        </h1>\n      </div>\n\n      <div className='banner--fadeBottom'></div>\n    </header>\n  );\n}\n\nexport default Banner;\n","import React, { useState, useEffect } from 'react';\nimport '../css/nav.css';\n\nfunction Nav() {\n  const [show, handleShow] = useState([]);\n\n  useEffect(() => {\n    window.addEventListener('scroll', () => {\n      if (window.scrollY > 100) {\n        handleShow(true);\n      } else {\n        handleShow(false);\n      }\n    });\n\n    return () => {\n      window.removeEventListener('scroll');\n    };\n  }, []);\n  return (\n    <div className={`nav ${show && 'nav__black'}`}>\n      <img\n        className='nav__logo'\n        src='https://1000logos.net/wp-content/uploads/2017/05/Netflix-Logo.png'\n        alt='Netflix Logo'\n      />\n\n      <img\n        className='nav__avatar'\n        src='https://i.pinimg.com/originals/0d/dc/ca/0ddccae723d85a703b798a5e682c23c1.png'\n        alt='Avatar'\n      />\n    </div>\n  );\n}\n\nexport default Nav;\n","import React from 'react';\nimport './App.css';\nimport Row from './components/Row';\nimport Banner from './components/Banner';\nimport Nav from './components/Nav';\nimport requests from './requests';\n\nfunction App() {\n  return (\n    <div className='app'>\n      <Nav />\n      <Banner />\n      <Row\n        title='NETFLIX ORIGINALS'\n        fetchUrl={requests.fetchNetflixOriginals}\n        isLargeRow\n      />\n      <Row title='Trending Now' fetchUrl={requests.fetchTrending} />\n      <Row title='Top Rated' fetchUrl={requests.fetchTopRated} />\n      <Row title='Action' fetchUrl={requests.fetchActionMovies} />\n      <Row title='Comedy' fetchUrl={requests.fetchComedyMovies} />\n      <Row title='Horror' fetchUrl={requests.fetchHorrorMovies} />\n      <Row title='Romance' fetchUrl={requests.fetchRomanceMovies} />\n      <Row title='Documentaries' fetchUrl={requests.fetchDocumentaries} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}